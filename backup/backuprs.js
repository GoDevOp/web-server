// Generated by CoffeeScript 1.4.0
(function() {
  var cfClient, cloudfiles, crypto, dateformat, encryptionPassword, ensureCfClientAuthorized, fs, path, postFile, rackspaceApiKey, rackspaceBackupContainer, rackspaceUsername, retry, sourceFile, stream, zlib;

  cloudfiles = require('cloudfiles');

  fs = require('fs');

  dateformat = require('dateformat');

  crypto = require('crypto');

  zlib = require('zlib');

  stream = require('readable-stream');

  sourceFile = process.argv[2];

  rackspaceApiKey = process.env.SURESPOT_RACKSPACE_API_KEY;

  rackspaceBackupContainer = process.env.SURESPOT_RACKSPACE_BACKUP_CONTAINER;

  rackspaceUsername = process.env.SURESPOT_RACKSPACE_USERNAME;

  encryptionPassword = process.env.SURESPOT_RACKSPACE_BACKUP_ENCRYPTION_PASSWORD;

  if (!(rackspaceApiKey != null)) {
    console.error("no rackspace api key");
    process.exit(1);
  }

  if (!(rackspaceBackupContainer != null)) {
    console.error("no rackspace container");
    process.exit(1);
  }

  if (!(rackspaceUsername != null)) {
    console.error("no rackspace username");
    process.exit(1);
  }

  if (!(encryptionPassword != null)) {
    console.error("no file encryption password");
    process.exit(1);
  }

  if (!(sourceFile != null)) {
    console.error("no file");
    process.exit(1);
  }

  cfClient = cloudfiles.createClient({
    auth: {
      username: rackspaceUsername,
      apiKey: rackspaceApiKey
    }
  });

  ensureCfClientAuthorized = function(force, callback) {
    if (!cfClient.authorized || force) {
      cfClient.authorized = false;
      return cfClient.setAuth(function(err) {
        if (err != null) {
          return callback(err);
        }
        return callback();
      });
    } else {
      return callback();
    }
  };

  retry = 0;

  postFile = function(force, path, file, callback) {
    return ensureCfClientAuthorized(force, function(err) {
      if (err != null) {
        return process.exit(1);
      }
      return cfClient.addFile(rackspaceBackupContainer, {
        remote: path,
        local: file
      }, function(err, uploaded) {
        if (err != null) {
          if ((err.message.indexOf("Unauthorized" > -1)) && (retry === 0)) {
            retry++;
            return postFile(true, path, file, callback);
          } else {
            return callback(err);
          }
        } else {
          return callback(null, uploaded);
        }
      });
    });
  };

  path = dateformat("yyyymmdd_HHMMss_") + ("" + sourceFile);

  console.log("backing up " + sourceFile + " to " + path);

  postFile(false, path, sourceFile, function(err, uploaded) {
    if (err != null) {
      console.error("error: " + err);
      process.exit(1);
    }
    console.log("uploaded: " + uploaded);
    return process.exit(uploaded != null ? uploaded : {
      0: 1
    });
  });

}).call(this);
