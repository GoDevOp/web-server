// Generated by CoffeeScript 1.4.0
(function() {
  var cc, ccc, ccn, coffeeCordova, commonCoffeeCordova, commonCoffeeNode, copyCommonCssCordova, copyCommonCssNode, copyCommonLibCordova, copyCommonLibNode, exec, fse, jadeCordova, jadeNode, optimizeNode, print, spawn;

  print = require('sys').print;

  spawn = require('child_process').spawn;

  fse = require('fs-extra');

  ccc = commonCoffeeCordova = function(callback) {
    return exec('coffee', ['-c', '-o', 'android/assets/js/app/', 'common/src/client/'], callback);
  };

  ccn = commonCoffeeNode = function(callback) {
    return exec('coffee', ['-c', '-o', 'node/assets/js/app/', 'common/src/client/'], callback);
  };

  copyCommonCssNode = function(callback) {
    return fse.mkdir('node/assets/css', function() {
      return fse.copy('common/css', 'node/assets/css', callback);
    });
  };

  copyCommonCssCordova = function(callback) {
    return fse.mkdir('android/assets/css', function() {
      return fse.copy('common/css', 'android/assets/css/', callback);
    });
  };

  copyCommonLibCordova = function(callback) {
    return fse.mkdir('android/assets/js/lib', function() {
      return fse.copy('common/lib', 'android/assets/js/lib/', callback);
    });
  };

  copyCommonLibNode = function(callback) {
    return fse.mkdir('node/assets/js/lib', function() {
      return fse.copy('common/lib', 'node/assets/js/lib/', callback);
    });
  };

  cc = coffeeCordova = function(callback) {
    return exec('coffee', ['-c', '-o', 'android/assets/js/app/', 'android/websrc'], callback);
  };

  task('cn', 'compile src coffee to node assets', function() {
    return coffeeNode();
  });

  task('cc', 'compile src coffee to cordova assets', function() {
    return coffeeCordova();
  });

  task('bc', 'build all cordova assets', function() {
    commonCoffeeCordova(coffeeCordova);
    copyCommonCssCordova(function(err) {
      if (err != null) {
        return console.log(err);
      }
    });
    copyCommonLibCordova(function(err) {
      if (err != null) {
        return console.log(err);
      }
    });
    return jadeCordova();
  });

  task('bn', 'build all node assets', function() {
    return commonCoffeeNode(jadeNode(copyCommonCssNode(function(err) {
      if (err != null) {
        return console.log(err);
      }
      return copyCommonLibNode(function(err) {
        if (err != null) {
          return console.log(err);
        }
      });
    })));
  });

  task('ccssn', 'copy common css to node', function() {
    return copyCommonCssNode(function(err) {
      if (err != null) {
        return console.log(err);
      }
    });
  });

  task('cccc', 'copy common css to cordova', function() {
    return copyCommonCssCordova(function(err) {
      if (err != null) {
        return console.log(err);
      }
    });
  });

  task('ccln', 'copy common lib to node', function() {
    return copyCommonLibNode(function(err) {
      if (err != null) {
        return console.log(err);
      }
    });
  });

  task('cclc', 'copy common lib to cordova', function() {
    return copyCommonLibCordova(function(err) {
      if (err != null) {
        return console.log(err);
      }
    });
  });

  task('wcn', 'Watch src/ for coffee changes, update node', function() {
    return exec('coffee', ['-w', '-c', '-o', 'node/assets/js/app/', 'common/src/client']);
  });

  optimizeNode = function(callback) {
    return exec('node', ['build/r.js', '-o', 'build/node.build.js']);
  };

  task('optimize', 'r.js the code', function() {
    return optimize();
  });

  jadeNode = function(callback) {
    return exec("jade", ['common/src/views/layout.jade', '--out', 'node/assets/html/'], callback);
  };

  task("jn", "compile 'jade'files to node '.html'", function(options) {
    return jadeNode();
  });

  task("jap", "compile jade templates to android html folder", function(options) {
    return jadeCordova();
  });

  jadeCordova = function(callback) {
    return exec("jade", ['common/src/views/layout.jade', '-P', '--out', 'android/assets/html/'], callback);
  };

  exec = function(command, args, callback) {
    var p;
    p = spawn(command, args);
    p.stderr.on('data', function(data) {
      return process.stderr.write(data.toString());
    });
    p.stdout.on('data', function(data) {
      return print(data.toString());
    });
    return p.on('exit', function(code) {
      if (code === 0) {
        return typeof callback === "function" ? callback() : void 0;
      }
    });
  };

}).call(this);
