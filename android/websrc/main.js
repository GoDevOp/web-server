// Generated by CoffeeScript 1.3.3
(function() {

  requirejs.config({
    shim: {
      "socket.io": {
        exports: "io"
      }
    },
    paths: {
      jquery: "../lib/jquery-1.7.1",
      jqm: "../lib/jquery.mobile-1.1.1",
      "socket.io": "/socket.io/socket.io",
      knockout: "../lib/knockout-2.1.0.debug"
    }
  });

  require(["jquery", 'knockout', "./chatcontroller", './uicontroller', "./usercontroller", "./viewmodels/UserViewModel", "./viewmodels/FriendsViewModel", "./viewmodels/ListViewModel", "./viewmodels/NotificationsViewModel"], function($, ko, chatController, uiController) {
    var redirectToConversation;
    redirectToConversation = function(event, locationHash) {
      var index;
      index = locationHash.indexOf("#conversation");
      if (index > -1) {
        event.preventDefault();
        console.log("redirectToConversation: " + locationHash);
        return uiController.recreateConversation(locationHash);
      }
    };
    /*
      if the user refreshed we want to show whatever page we were on before
      but in the case of the conversation pages we are generating them dynamically
      so we need to rebuild the page
    */

    $(document).one("pagebeforechange", function(event, data) {
      if (typeof data.toPage === "string") {
        console.log("pagebeforechange: " + data.toPage);
        return redirectToConversation(event, data.toPage);
      } else {
        console.log("pagebeforechange: " + data.toPage[0].id);
        if (location.hash.indexOf("#conversation_") > -1) {
          return redirectToConversation(event, location.hash);
        }
      }
    });
    /*ko.bindingHandlers.jqmPage =
      init: (element, valueAccessor) ->
        # if element? and element.length > 0
        console.log 'jqmPage init,  element: ' + element
        #ko.utils.unwrapObservable valueAccessor() #just to create a dependency
        setTimeout (-> #To make sure the refresh fires after the DOM is updated
          $(element).parent('div')[0].updateLayout()
        ), 0,
    
      update: (element, valueAccessor) ->
          # if element? and element.length > 0
        console.log 'jqmPage, element: ' + element
        #ko.utils.unwrapObservable valueAccessor() #just to create a dependency
        setTimeout (-> #To make sure the refresh fires after the DOM is updated
          $(element).parent('div')[0].updateLayout()
        ), 0
    */

    chatController.connect();
    $(document).bind("ready", function() {
      console.log('ready');
      return require(['jqm'], function() {
        $("body").css("visibility", "visible");
        return ko.bindingHandlers.jqmRefreshList = {
          update: function(element, valueAccessor) {
            console.log('jqmRefreshList, element css: ' + $(element).attr('class'));
            return setTimeout((function() {
              $(element).trigger('create');
              $(element).listview();
              return $(element).listview("refresh");
            }), 100);
          }
        };
      });
    });
    return $(document).bind("mobileinit", function() {
      console.log("mobileinit");
      $.mobile.defaultPageTransition = 'none';
      return $.ajaxSetup({
        contentType: "application/json; charset=utf-8",
        statusCode: {
          401: function() {
            return $.mobile.changePage("#login");
          }
        }
      });
    });
  });

}).call(this);
