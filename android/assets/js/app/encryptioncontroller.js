// Generated by CoffeeScript 1.3.3
(function() {

  define(["./encryption", "./networkcontroller"], function(encryption, networkcontroller) {
    var EncryptionController;
    EncryptionController = (function() {

      EncryptionController.prototype.symmetricKeys = {};

      EncryptionController.prototype.publickeys = {};

      EncryptionController.prototype.privatekey = null;

      EncryptionController.prototype.publickey = null;

      EncryptionController.prototype.readycallback = null;

      function EncryptionController() {
        var _this = this;
        this.privatekey = localStorage.getItem("privatekey");
        if (this.privatekey) {
          console.log("keypair loaded from localStorage");
          this._setAsymKey(JSON.parse(this.privatekey));
          if (this.readycallback) {
            this.readycallback(true);
          }
        } else {
          encryption.generateKeyPairAsync(function(generatedKey) {
            console.log("keypair generated");
            localStorage.setItem("privatekey", JSON.stringify(generatedKey));
            _this._setAsymKey(generatedKey);
            if (_this.readycallback) {
              return _this.readycallback(true);
            }
          });
        }
      }

      EncryptionController.prototype._hydratePublicKey = function(username, callback) {
        var publickey,
          _this = this;
        publickey = this.publickeys[username];
        if (publickey != null) {
          return callback(publickey);
        } else {
          return networkcontroller.getPublicKey(username, function(publickey) {
            _this._storePublicKey(username, publickey);
            return callback(publickey);
          }, function() {
            return callback(null);
          });
        }
      };

      EncryptionController.prototype._storePublicKey = function(username, publickey) {
        return this.publickeys[username] = publickey;
      };

      EncryptionController.prototype.asymDecrypt = function(ciphertext) {
        return encryption.asymDecrypt(this.privatekey, ciphertext);
      };

      EncryptionController.prototype.createSymKeys = function(room, remoteusername, callback) {
        var _this = this;
        return this._hydratePublicKey(remoteusername, function(remotepublickey) {
          var mkey, newKey, tkey;
          if (remotepublickey == null) {
            alert("no public key!");
            callback(null);
          }
          newKey = "somekey";
          _this.symmetricKeys[room] = newKey;
          mkey = encryption.rsaEncrypt(_this.publickey, newKey);
          tkey = encryption.rsaEncrypt(remotepublickey, newKey);
          return callback({
            mykey: mkey,
            theirkey: tkey
          });
        });
      };

      EncryptionController.prototype.symEncrypt = function(room, plaintext) {
        return encryption.aesEncrypt(this.symmetricKeys[room], plaintext);
      };

      EncryptionController.prototype.symDecrypt = function(room, ciphertext) {
        return encryption.aesDecrypt(this.symmetricKeys[room], ciphertext);
      };

      EncryptionController.prototype._setAsymKey = function(key) {
        this.privatekey = key;
        return this.publickey = key.n;
      };

      return EncryptionController;

    })();
    return new EncryptionController();
  });

}).call(this);
