// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "knockout", './ListViewModel', "./UserViewModel", 'networkcontroller', 'uicontroller', 'chatcontroller', 'utils'], function($, ko, ListViewModel, UserViewModel, networkcontroller, uicontroller, chatcontroller, utils) {
    var FriendsViewModel, element, friendsViewModel, _i, _len, _ref;
    FriendsViewModel = (function(_super) {

      __extends(FriendsViewModel, _super);

      FriendsViewModel.prototype.title = ko.computed(function() {
        return "surespot / " + (UserViewModel.username()) + " / friends";
      });

      function FriendsViewModel() {
        this.friendHandler = __bind(this.friendHandler, this);
        FriendsViewModel.__super__.constructor.call(this);
        chatcontroller.setFriendCallback(this.friendHandler);
      }

      FriendsViewModel.prototype.getNewMessageCount = function(room) {
        return uicontroller.getNewMessageCount(room);
      };

      FriendsViewModel.prototype.totalMessageCount = uicontroller.totalMessageCount;

      FriendsViewModel.prototype.load = function(username) {
        var _this = this;
        return networkcontroller.getFriends(username, function(data) {
          var _ref;
          if ((_ref = _this.itemList) != null) {
            _ref.removeAll();
          }
          ko.utils.arrayPushAll(_this.itemList, $.map(data, function(fname) {
            return _this._createFriend(fname);
          }));
          return _this.itemList.valueHasMutated();
        });
      };

      FriendsViewModel.prototype.friendClick = function(data, event) {
        return uicontroller.createOrShowConversation(data.room, data.friendname);
      };

      FriendsViewModel.prototype.friendHandler = function(fname) {
        this.addFriend(fname);
        return console.log("adding new friend " + fname);
      };

      FriendsViewModel.prototype.addFriend = function(fname) {
        console.log("joining room");
        chatcontroller.emit("join", utils.getRoomName(fname));
        return this.addItem(this._createFriend(fname));
      };

      FriendsViewModel.prototype._createFriend = function(fname) {
        return {
          friendname: fname,
          room: utils.getRoomName(fname)
        };
      };

      FriendsViewModel.prototype.logout = function() {
        return uicontroller.logout();
      };

      return FriendsViewModel;

    })(ListViewModel);
    $("#blinkerinput").bind("keypress", function(e) {
      var text;
      if (e.which === 13) {
        text = $(this).val();
        if (text && text.length > 0) {
          networkcontroller.invite(text, function(data, status, jqXHR) {});
          return uicontroller.resetInput($(this));
        }
      }
    });
    friendsViewModel = new FriendsViewModel();
    _ref = $('#friendscontent, .friends-vm');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      element = _ref[_i];
      ko.applyBindings(friendsViewModel, element);
    }
    friendsViewModel.load(UserViewModel.getUsername());
    return friendsViewModel;
  });

}).call(this);
