// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "knockout", './ListViewModel', './UserViewModel', 'networkcontroller', 'chatcontroller', 'encryptioncontroller'], function($, ko, ListViewModel, UserViewModel, networkcontroller, chatcontroller, encryptioncontroller) {
    var ConversationViewModel;
    return ConversationViewModel = (function(_super) {
      var remoteusername, spot;

      __extends(ConversationViewModel, _super);

      spot = null;

      remoteusername = null;

      function ConversationViewModel(remoteusername, spot) {
        this.load = __bind(this.load, this);

        var _this = this;
        ConversationViewModel.__super__.constructor.call(this);
        this.spot = spot;
        this.remoteusername = remoteusername;
        $.each($("#conversation_" + spot + " h1"), function(index, value) {
          return ko.applyBindings(_this, value);
        });
      }

      ConversationViewModel.prototype.load = function(callback) {
        var _this = this;
        return networkcontroller.getMessages(this.spot, function(data) {
          var _ref;
          if ((_ref = _this.itemList) != null) {
            _ref.removeAll();
          }
          $.each(data, function(index, messageString) {
            var message;
            message = JSON.parse(messageString);
            return _this.addMessage(message);
          });
          return callback();
        });
      };

      ConversationViewModel.prototype.title = function() {
        return "surespot / " + (UserViewModel.username()) + " / " + this.remoteusername;
      };

      ConversationViewModel.prototype.addMessage = function(message) {
        return this.addItem(message.user + ': ' + encryptioncontroller.symDecrypt(message.room, message.text));
      };

      return ConversationViewModel;

    })(ListViewModel);
  });

}).call(this);
