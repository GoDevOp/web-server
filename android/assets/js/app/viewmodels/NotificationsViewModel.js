// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "knockout", './ListViewModel', 'networkcontroller', './FriendsViewModel', './UserViewModel', 'chatcontroller'], function($, ko, ListViewModel, networkcontroller, FriendsViewModel, UserViewModel, chatcontroller) {
    var NotificationsViewModel, notificationsViewModel;
    NotificationsViewModel = (function(_super) {

      __extends(NotificationsViewModel, _super);

      NotificationsViewModel.prototype.title = ko.computed(function() {
        return "surespot / " + (UserViewModel.username()) + " / notifications";
      });

      function NotificationsViewModel() {
        this.notificationHandler = __bind(this.notificationHandler, this);
        console.log("NotificationsViewModel constructor");
        NotificationsViewModel.__super__.constructor.call(this);
        chatcontroller.setNotificationCallback(this.notificationHandler);
      }

      NotificationsViewModel.prototype.load = function() {
        var _this = this;
        return networkcontroller.getNotifications(function(data) {
          var _ref;
          if ((_ref = _this.itemList) != null) {
            _ref.removeAll();
          }
          if ((data != null ? data.length : void 0) > 0) {
            ko.utils.arrayPushAll(_this.itemList, data);
            return _this.itemList.valueHasMutated();
          }
        });
      };

      NotificationsViewModel.prototype.notificationClick = function(notification, event, data) {
        var _this = this;
        if (notification.type === 'invite') {
          return networkcontroller.respondToInvite(notification.data, data, function() {
            if (data === 'accept') {
              FriendsViewModel.addFriend(notification.data);
            }
            return _this.itemList.remove(notification);
          });
        }
      };

      NotificationsViewModel.prototype.notificationHandler = function(notification) {
        console.log("received notification, type: " + notification.type + ", data: " + notification.data);
        return this.addItem(notification);
      };

      return NotificationsViewModel;

    })(ListViewModel);
    notificationsViewModel = new NotificationsViewModel();
    $.each($('#notificationscontent, .notifications-vm'), function(index, value) {
      return ko.applyBindings(notificationsViewModel, value);
    });
    notificationsViewModel.load();
    return notificationsViewModel;
  });

}).call(this);
