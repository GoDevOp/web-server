// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['jquery', './networkcontroller', './encryptioncontroller', './chatcontroller', './utils', 'knockout', './viewmodels/ConversationViewModel', './viewmodels/UserViewModel'], function($, networkcontroller, encryptioncontroller, chatcontroller, utils, ko, ConversationViewModel, UserViewModel) {
    var UIController, uiController;
    UIController = (function() {

      UIController.prototype.newMessageCount = {};

      UIController.prototype.totalMessageCount = ko.observable(0);

      UIController.prototype.getNewMessageCount = function(room) {
        var messageCount;
        messageCount = this.newMessageCount[room];
        if (!(messageCount != null)) {
          messageCount = ko.observable(0);
          this.newMessageCount[room] = messageCount;
        }
        return messageCount;
      };

      function UIController() {
        this.recreateConversation = __bind(this.recreateConversation, this);

        this.appendMessage = __bind(this.appendMessage, this);
        chatcontroller.setMessageCallback(this.appendMessage);
      }

      UIController.prototype._showConversationPage = function(room) {
        var conversationId, conversationPage, conversationUrl, conversationname, elementHeight;
        conversationname = room;
        conversationId = "conversation_" + conversationname;
        conversationPage = $("#" + conversationId);
        conversationUrl = "#" + conversationId;
        if (conversationPage.length === 0) {
          return conversationname;
        } else {
          elementHeight = conversationPage.height();
          console.log("conversation div height before change page: " + elementHeight);
          this._scrollConversation(conversationname);
          $.mobile.changePage(conversationUrl);
          setTimeout(this.newMessageCount[room](0), 0);
          return null;
        }
      };

      UIController.prototype.logout = function() {
        return networkcontroller.logout(function() {
          chatcontroller.disconnect();
          $.mobile.changePage("#login");
          $(".dynamicConversationPage").remove();
          return $('.ss-logout').removeClass('ui-btn-active');
        }, function() {
          return alert('error');
        });
      };

      UIController.prototype.resetInput = function(input) {
        input.val('');
        return input.focus;
      };

      UIController.prototype._scrollConversation = function(conversationName) {
        var elementHeight;
        elementHeight = $("#conversation_" + conversationName).height();
        console.log("conversation div height" + elementHeight);
        return $("html, body").stop().animate({
          scrollTop: elementHeight
        }, 300);
      };

      UIController.prototype.appendMessage = function(data) {
        var conversationViewModel, count, incrementCount, linesList, message, messageCount, room, sum, _ref;
        if (data != null) {
          message = JSON.parse(data);
          room = message.room;
          incrementCount = true;
          linesList = $("#lines_" + room);
          if (linesList.length) {
            conversationViewModel = ko.dataFor(linesList[0]);
            conversationViewModel.addMessage(message);
            this._scrollConversation(room);
            if ($(linesList[0]).is(':visible')) {
              incrementCount = false;
            }
          }
          if (incrementCount) {
            messageCount = this.newMessageCount[room];
            if (messageCount != null) {
              messageCount(messageCount() + 1);
            } else {
              this.newMessageCount[room] = ko.observable(1);
            }
            sum = 0;
            _ref = this.newMessageCount;
            for (room in _ref) {
              count = _ref[room];
              sum += count();
            }
            return this.totalMessageCount(sum);
          }
        }
      };

      UIController.prototype.createOrShowConversation = function(room, remoteuser) {
        var _this = this;
        room = this._showConversationPage(room);
        if (room != null) {
          return networkcontroller.getConversationKey(room, function(data) {
            var skey;
            if (data != null) {
              skey = encryptioncontroller.asymDecrypt(data);
              if (skey == null) {
                alert('could not decrypt conversation key');
                return;
              }
              encryptioncontroller.symmetricKeys[room] = skey;
              chatcontroller.emit("join", room);
              return _this._createConversationPage(room, remoteuser);
            } else {
              return _this._createConversation(room, remoteuser);
            }
          }, function(err) {
            return alert('could not get sym key');
          });
        }
      };

      UIController.prototype._createConversation = function(room, remoteusername) {
        var _this = this;
        return encryptioncontroller.createSymKeys(room, remoteusername, function(symKeys) {
          var message;
          message = {};
          message.room = room;
          message.mykey = symKeys.mykey;
          message.theirname = remoteusername;
          message.theirkey = symKeys.theirkey;
          chatcontroller.emit("create", JSON.stringify(message));
          return _this._createConversationPage(room, remoteusername);
        });
      };

      UIController.prototype.recreateConversation = function(conversationname) {
        var remoteusername, room, username, users;
        username = UserViewModel.getUsername();
        room = conversationname.substr(14);
        users = room.split("_");
        remoteusername = username === users[0] ? users[1] : users[0];
        return this.createOrShowConversation(room, remoteusername);
      };

      UIController.prototype._createConversationPage = function(conversationname, remoteusername) {
        var conversationId, conversationPage, conversationUrl, conversationViewModel, friendsButton, input, linesList, users,
          _this = this;
        users = conversationname.split("_");
        conversationId = "conversation_" + conversationname;
        conversationUrl = "#" + conversationId;
        conversationPage = $("#conversationtemplate").clone();
        this.newMessageCount[conversationname](0);
        conversationPage.attr("id", conversationId);
        conversationPage.attr("data-url", conversationUrl);
        conversationPage.addClass('conversation-page');
        conversationPage.find("h1").text(remoteusername);
        linesList = conversationPage.find(".conversationlines").attr("id", "lines_" + conversationname);
        input = conversationPage.find(".conversationinput");
        friendsButton = conversationPage.find(".conversationfriendsbutton");
        friendsButton.on("click", function() {
          return $.mobile.changePage("#friends");
        });
        input.attr("id", "input_" + conversationname);
        input.on("keypress", {
          that: this
        }, function(e) {
          var text;
          if (e.which === 13) {
            text = $(this).val();
            chatcontroller.sendMessage(conversationname, text);
            if (text && text.length > 0) {
              e.preventDefault();
              return e.data.that.resetInput(input);
            }
          }
        });
        $("#page_body").append(conversationPage);
        $.mobile.initializePage();
        conversationViewModel = new ConversationViewModel(remoteusername, conversationname);
        return conversationViewModel.load(function() {
          var element, _i, _j, _len, _len1, _ref, _ref1;
          _ref = $(conversationPage).find('.conversationcontent');
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            element = _ref[_i];
            ko.applyBindings(conversationViewModel, element);
          }
          _ref1 = $('.newMessagesCount, .messageCountTotal, .ss-logout');
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            element = _ref1[_j];
            ko.applyBindings(_this, element);
          }
          _this._scrollConversation(conversationname);
          return $.mobile.changePage(conversationPage);
        });
      };

      return UIController;

    })();
    uiController = new UIController();
    $.each($('.newMessagesCount, .messageCountTotal, .ss-logout'), function(index, value) {
      return ko.applyBindings(uiController, value);
    });
    return uiController;
  });

}).call(this);
