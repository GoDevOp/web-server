// Generated by CoffeeScript 1.3.3
(function() {

  define(["./encryptioncontroller", "./networkcontroller", "./chatcontroller", './uicontroller', "./utils", "./viewmodels/FriendsViewModel", "./viewmodels/UserViewModel", "jquery"], function(encryptioncontroller, networkcontroller, chatcontroller, uicontroller, utils, FriendsViewModel, UserViewModel, $) {
    var UserController, userController;
    UserController = (function() {

      function UserController() {}

      UserController.prototype.encryptionReady = false;

      UserController.prototype.signupCredsReady = false;

      UserController.prototype.username = null;

      UserController.prototype.password = null;

      UserController.prototype.login = function(username, password, callback) {
        var loginSuccessCallback, unauthorizedCallback;
        return networkcontroller.login(username, password, (loginSuccessCallback = function() {
          chatcontroller.connect();
          UserViewModel.setUsername(username);
          $(".dynamicConversationPage").remove();
          FriendsViewModel.load();
          return $.mobile.changePage("#friends");
        }), unauthorizedCallback = function() {
          return alert("Unauthorized");
        });
      };

      UserController.prototype.signup = function(username, password) {
        this.signupCredsReady = true;
        this.username = username;
        this.password = password;
        if (!this.encryptionReady) {
          if (encryptioncontroller.publickey) {
            this.encryptionReady = true;
          } else {
            return alert("generating key pair, you will be logged in when this has completed.");
          }
        }
        if (this.encryptionReady && this.signupCredsReady) {
          return this.signupanduploadkey();
        }
      };

      UserController.prototype.signupanduploadkey = function() {
        var signupErrorCallback, signupSuccessCallback, u;
        u = this.username;
        return networkcontroller.addUser(this.username, this.password, encryptioncontroller.publickey, (signupSuccessCallback = function() {
          chatcontroller.connect();
          UserViewModel.setUsername(u);
          $(".dynamicConversationPage").remove();
          FriendsViewModel.load();
          return $.mobile.changePage("#friends");
        }), signupErrorCallback = function() {
          return alert("error creating user");
        });
      };

      return UserController;

    })();
    encryptioncontroller.readycallback = function(ready) {
      var encryptionReady;
      encryptionReady = ready;
      if (this.encryptionReady && this.signupCredsReady) {
        return signupanduploadkey();
      }
    };
    userController = new UserController();
    $("#loginform").bind("submit", function(e) {
      var password, username;
      e.preventDefault();
      username = $("#usernameinput").val();
      password = $("#passwordInput").val();
      return userController.login(username, password);
    });
    $("#signupform").bind("submit", function(e) {
      var password, username;
      e.preventDefault();
      username = $("#signupusernameinput").val();
      password = $("#signupPasswordInput").val();
      return userController.signup(username, password);
    });
    return userController;
  });

}).call(this);
