// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["socket.io", "./encryptioncontroller", "./networkcontroller", './utils', 'jquery', 'knockout'], function(io, encryptioncontroller, networkcontroller, utils, $, ko) {
    var ChatController;
    ChatController = (function() {

      function ChatController() {
        this.sendMessage = __bind(this.sendMessage, this);

      }

      ChatController.prototype._socket = null;

      ChatController.prototype._uicontroller = null;

      ChatController.prototype._callbacks = {};

      ChatController.prototype.setConnectCallback = function(callback) {
        return this._callbacks["connect"] = callback;
      };

      ChatController.prototype.setMessageCallback = function(callback) {
        return this._callbacks["message"] = callback;
      };

      ChatController.prototype.setNotificationCallback = function(callback) {
        return this._callbacks["notification"] = callback;
      };

      ChatController.prototype.setFriendCallback = function(callback) {
        return this._callbacks["friend"] = callback;
      };

      ChatController.prototype.emit = function(type, data) {
        return this._socket.emit(type, data);
      };

      ChatController.prototype.sendMessage = function(room, text) {
        var message;
        if ((text != null) && text.length > 0) {
          message = {};
          message.text = encryptioncontroller.symEncrypt(room, text);
          message.room = room;
          return this._socket.send(JSON.stringify(message));
        }
      };

      ChatController.prototype.disconnect = function() {
        var _ref;
        if (this._socket != null) {
          return (_ref = this._socket) != null ? _ref.socket.disconnect() : void 0;
        }
      };

      ChatController.prototype.connect = function() {
    	  
        var nullsocket,
          _this = this;
        this.disconnect();
        if (!(this._socket != null) || !this._socket.socket.connected) {
          nullsocket = !(this._socket != null);
          if (nullsocket) {
        	  console.log("conecting chat");
        	  console.log('io: ' + io);
            this._socket = io.connect("http://alpha.surespot.me");
            console.log("tsocket connected?: " + this._socket.socket.connected);
          } else {
            this._socket.socket.connect();
          }
          if (nullsocket) {
        	  this._socket.on("socket io error", function(err) {
        		  console.log("error: " + err);
        	  });
            this._socket.on("connect", function() {
              var _base;
              console.log("CON");
              return typeof (_base = _this._callbacks)["connect"] === "function" ? _base["connect"]() : void 0;
            });
            this._socket.on("message", function(data) {
              var _base;
              console.log("message");
              return typeof (_base = _this._callbacks)["message"] === "function" ? _base["message"](data) : void 0;
            });
            this._socket.on("disconnect", function() {
              return console.log("DISC");
            });
            this._socket.on("notification", function(notification) {
              var _base;
              console.log("notification");
              return typeof (_base = _this._callbacks)["notification"] === "function" ? _base["notification"](notification) : void 0;
            });
            return this._socket.on("friend", function(username) {
              var _base;
              console.log("friend");
              return typeof (_base = _this._callbacks)["friend"] === "function" ? _base["friend"](username) : void 0;
            });
          }
        }
      };

      return ChatController;

    })();
    return new ChatController();
  });

}).call(this);
